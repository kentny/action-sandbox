name: Deploy to Amazon ECS

on:
  push:
    branches: ["services"]

env:
  AWS_REGION: us-west-2 # set this to your preferred AWS region, e.g. us-west-1
  ECS_SERVICE: sample-service # set this to your Amazon ECS service name
  ECS_CLUSTER: sample-0 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json # set this to the path to your Amazon ECS task definition

permissions:
  contents: read

jobs:
  frontend-test-build-image:
    name: Frontend Container - Test and Build
    runs-on: ubuntu-20.04
    env:
      TEMP_IMAGE_NAME: temp-frontend-image
    timeout-minutes: 10
    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v3

      - name: Build an Image and Run Tests
        run: |
          docker build --target production -t $TEMP_IMAGE_NAME:latest --build-arg REACT_APP_API_SERVER=/api .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push the image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_FRONTEND_SERVER_REPOSITORY }}
        run: |
          docker image tag $TEMP_IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  api-test-build-image:
    name: API Container - Test and Build
    runs-on: ubuntu-20.04
    env:
      TEMP_IMAGE_NAME: temp-api-image
    timeout-minutes: 10
    defaults:
      run:
        working-directory: api

    steps:
      - uses: actions/checkout@v3

      - name: Build an Image and Run Tests
        run: |
          docker build --target production -t $TEMP_IMAGE_NAME:latest  .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push an image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_API_SERVER_REPOSITORY }}
        run: |
          docker image tag $TEMP_IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    needs: [frontend-test-build-image, api-test-build-image]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition for frontend
        id: render-frontend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: frontend
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_FRONTEND_SERVER_REPOSITORY }}

      - name: Fill in the new image ID in the Amazon ECS task definition for api
        id: render-api-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-frontend-task-def.outputs.task-definition }}
          container-name: api
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_API_SERVER_REPOSITORY }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-api-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
